# -*- coding: utf-8 -*-
"""Corr.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QQTEMQBHpqN6U3_3sKHfAkxAD9P3v4sB
"""

import io
import pandas as pd
import numpy as np
from google.colab import files
import seaborn as sns 
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error as MSE
from sklearn import tree
from sklearn.tree import DecisionTreeRegressor
from statsmodels.stats.outliers_influence import variance_inflation_factor

uploaded = files.upload()

df = pd.read_excel(io.BytesIO(uploaded.get('New data.xlsx')))
df.info()

df = df[['Job Grade', 'Gender Reduced', 'Full/Part Time Reduced', 'Total Compensation', 'Years of Experience',	'Performance Score Reduced', 'Location',	'Special Qualifications',	'% of Time Traveling',	'Shifts']]
df

df['Location'] = df['Location'].map({"Applicable":1,"Not Applicable":0})

df['Special Qualifications'] = df['Special Qualifications'].map({"Applicable":1,"Not Applicable":0})

df['Shifts'] = df['Shifts'].map({"Non Regular":1,"Regular":0})

df

correlation = df[['Job Grade', 'Gender Reduced', 'Full/Part Time Reduced', 'Total Compensation', 'Years of Experience',	'Performance Score Reduced', 'Location',	'Special Qualifications',	'% of Time Traveling',	'Shifts']].corr()

fig, ax = plt.subplots(figsize=(12,12))
sns.heatmap(correlation, annot=True, linewidths=.5, center= 0.5, cmap='coolwarm', ax=ax)

X = df[['Job Grade', 'Gender Reduced', 'Full/Part Time Reduced', 'Years of Experience',	'Performance Score Reduced', 'Location',	'Special Qualifications',	'% of Time Traveling',	'Shifts']]
y = df['Total Compensation']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

X_train

y_train

lr = LinearRegression()
lr.fit(X_train, y_train)

y_predict = lr.predict(X_test)
y_predict

rmse_error = MSE(np.array(y_test), y_predict, squared=False) ** (1/2)
print(rmse_error)

vif = [variance_inflation_factor(X_train.values, i)  for i in range(len(X_train.columns))] 
vif

clf = tree.DecisionTreeRegressor(criterion='mse', max_depth=10,
                      max_features=9, max_leaf_nodes=10,
                      min_impurity_decrease=0.0, min_impurity_split=None,
                      min_samples_leaf=1, min_samples_split=2,
                      min_weight_fraction_leaf=0.0, presort='deprecated',
                      random_state=None, splitter='best')
clf.fit(X_train, y_train)

fig, ax = plt.subplots(figsize=(25,25))
tree.plot_tree(clf, ax=ax)